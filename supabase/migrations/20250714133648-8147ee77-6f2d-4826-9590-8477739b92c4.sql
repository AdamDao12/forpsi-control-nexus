-- First, update profiles table to match user requirements
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS pelican_user_id integer;

-- Create new orders table with correct structure
CREATE TABLE IF NOT EXISTS public.orders_new (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES public.profiles(auth_id),
  package text,
  ram integer,
  cpu integer,
  disk integer,
  paid boolean DEFAULT false,
  expires_at date,
  created_at timestamp DEFAULT now()
);

-- Migrate existing orders data
INSERT INTO public.orders_new (user_id, package, ram, cpu, disk, paid, created_at)
SELECT 
  user_id,
  service as package,
  1024 as ram,
  100 as cpu,
  2048 as disk,
  (status = 'completed') as paid,
  created_at
FROM public.orders;

-- Drop old orders table and rename new one
DROP TABLE public.orders CASCADE;
ALTER TABLE public.orders_new RENAME TO orders;

-- Create nodes table to match user requirements
CREATE TABLE IF NOT EXISTS public.nodes (
  id integer PRIMARY KEY,
  name text,
  location_id integer,
  reserved_by uuid REFERENCES public.profiles(auth_id),
  created_at timestamp DEFAULT now()
);

-- Update servers table to work with integer pelican IDs
ALTER TABLE public.servers ALTER COLUMN pelican_server_id TYPE integer USING pelican_server_id::integer;
ALTER TABLE public.servers ADD COLUMN IF NOT EXISTS node_id_int integer REFERENCES public.nodes(id);

-- Enable RLS on new tables
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.nodes ENABLE ROW LEVEL SECURITY;

-- Create policies for orders table
CREATE POLICY "Users can create their own orders" ON public.orders
  FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can view their own orders" ON public.orders
  FOR SELECT USING (user_id = auth.uid());

-- Create policies for nodes table
CREATE POLICY "Admins can manage nodes" ON public.nodes
  FOR ALL USING (EXISTS (
    SELECT 1 FROM public.profiles 
    WHERE auth_id = auth.uid() AND role = 'admin'
  ));

CREATE POLICY "Users can view available nodes" ON public.nodes
  FOR SELECT USING (reserved_by IS NULL OR reserved_by = auth.uid());

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_profiles_pelican_user_id ON public.profiles(pelican_user_id);
CREATE INDEX IF NOT EXISTS idx_nodes_reserved_by ON public.nodes(reserved_by);
CREATE INDEX IF NOT EXISTS idx_servers_node_id_int ON public.servers(node_id_int);
CREATE INDEX IF NOT EXISTS idx_orders_user_id ON public.orders(user_id);